import { Button, TextEdit, GridBox, VerticalBox, HorizontalBox, StandardButton } from "std-widgets.slint";

component CalcButton inherits Rectangle {
    in-out property <string> text;
    property <bool> hover <=> ta.has-hover;
    callback click();
    width: 5rem;
    height: 5rem;
    border-radius: 0.7rem;
    Text {
        text: text;
        font-size: 1.3rem;
        font-weight: 800;
    }

    ta := TouchArea {
        height: 5rem;
        width: 5rem;
        clicked => {
            if text != "" {
                click()
            }
        }
    }

    states [
        nonexistent when root.text == "": {
            background: transparent;
        }
        active when !root.hover: {
            background: #cfcfcf;
            drop-shadow-offset-y: 4px;
            drop-shadow-color: #cacaca;
            drop-shadow-blur: 4px;
            in {
                animate background { duration: 200ms; }
                animate drop-shadow-offset-y { duration: 200ms; }
            }
            out {
                animate background { duration: 200ms; }
                animate drop-shadow-offset-y { duration: 200ms; }
            }
        }
        active-hover when root.hover: {
            background: #bebebe;
            drop-shadow-offset-y: 2px;
            drop-shadow-color: #cacaca;
            drop-shadow-blur: 4px;
            in {
                animate background { duration: 200ms; }
                animate drop-shadow-offset-y { duration: 200ms; }
            }
            out {
                animate background { duration: 200ms; }
                animate drop-shadow-offset-y { duration: 200ms; }
            }
        }
    ]
}

export component AppWindow inherits Window {
    title: "Calculator";
    background: #e9e9e9;
    in-out property <string> textarea: ""; // Proprietate pentru afișarea textului în zona de text
    callback handle_click(string); // Callback pentru adăugarea textului în zona de text
    FocusScope {
        VerticalLayout {
            padding: 2rem;
            Rectangle {
                height: 30px;
            }

            text_box := Text {
                width: 390px;
                height: 40px;
                text: textarea; // Leagă `textarea` la textul afișat în acest `TextEdit`
                horizontal-alignment: right;
                font-size: 30px;
            }

            Rectangle {
                height: 10px;
            }
        // TASK: Adaugă primul rând de butoane pentru cifre și operatori într-un nou GridLayout.
        // HINT: Fiecare buton va fi într-un `Rectangle` pentru a avea dimensiuni și fundal personalizate. Folosește `Button` pentru acțiune.

            // TASK: Creează butonul pentru cifra "1".
            // HINT: Folosește un `Rectangle` pentru dimensiuni și un `Text` pentru afișarea cifrei. Folosește `Button` pentru a înregistra acțiunea.
            HorizontalLayout {
                spacing: 9rem;
                VerticalLayout {
                    spacing: 10px;
                    for line in [["1", "2", "3"], ["4", "5", "6"], ["7", "8", "9"], ["", "0", "."]]: HorizontalLayout {
                        spacing: 1rem;
                        width: 10rem;
                        for char in line: CalcButton {
                            text: char;
                            click => {
                                handle_click(char)
                            }
                        }
                    }
                }

                VerticalLayout {
                    spacing: 10px;
                    width: 8rem;
                    for line in [["+", "-"], ["*", "/"], ["(", ")"], ["=", "C"]]: HorizontalLayout {
                        spacing: 10px;
                        for char in line: CalcButton {
                            text: char;
                            click => {
                                handle_click(char)
                            }
                        }
                    }
                }
            }
        }

        key-pressed(event) => {
            handle_click(event.text);
            accept
        }
    }
}
